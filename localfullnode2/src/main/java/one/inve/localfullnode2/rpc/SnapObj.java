// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Hashnet1.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package one.inve.localfullnode2.rpc;

public class SnapObj implements java.lang.Cloneable, java.io.Serializable {
	public String snapMessage;

	public String messages;

	public SnapObj() {
		this.snapMessage = "";
		this.messages = "";
	}

	public SnapObj(String snapMessage, String messages) {
		this.snapMessage = snapMessage;
		this.messages = messages;
	}

	public boolean equals(java.lang.Object rhs) {
		if (this == rhs) {
			return true;
		}
		SnapObj r = null;
		if (rhs instanceof SnapObj) {
			r = (SnapObj) rhs;
		}

		if (r != null) {
			if (this.snapMessage != r.snapMessage) {
				if (this.snapMessage == null || r.snapMessage == null || !this.snapMessage.equals(r.snapMessage)) {
					return false;
				}
			}
			if (this.messages != r.messages) {
				if (this.messages == null || r.messages == null || !this.messages.equals(r.messages)) {
					return false;
				}
			}

			return true;
		}

		return false;
	}

	public int hashCode() {
		int h_ = 5381;
		h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::rpc::SnapObj");
		h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, snapMessage);
		h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, messages);
		return h_;
	}

	public SnapObj clone() {
		SnapObj c = null;
		try {
			c = (SnapObj) super.clone();
		} catch (CloneNotSupportedException ex) {
			assert false; // impossible
		}
		return c;
	}

	public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr) {
		ostr.writeString(this.snapMessage);
		ostr.writeString(this.messages);
	}

	public void ice_readMembers(com.zeroc.Ice.InputStream istr) {
		this.snapMessage = istr.readString();
		this.messages = istr.readString();
	}

	static public void ice_write(com.zeroc.Ice.OutputStream ostr, SnapObj v) {
		if (v == null) {
			_nullMarshalValue.ice_writeMembers(ostr);
		} else {
			v.ice_writeMembers(ostr);
		}
	}

	static public SnapObj ice_read(com.zeroc.Ice.InputStream istr) {
		SnapObj v = new SnapObj();
		v.ice_readMembers(istr);
		return v;
	}

	static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SnapObj> v) {
		if (v != null && v.isPresent()) {
			ice_write(ostr, tag, v.get());
		}
	}

	static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SnapObj v) {
		if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
			int pos = ostr.startSize();
			ice_write(ostr, v);
			ostr.endSize(pos);
		}
	}

	static public java.util.Optional<SnapObj> ice_read(com.zeroc.Ice.InputStream istr, int tag) {
		if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
			istr.skip(4);
			return java.util.Optional.of(SnapObj.ice_read(istr));
		} else {
			return java.util.Optional.empty();
		}
	}

	private static final SnapObj _nullMarshalValue = new SnapObj();

	public static final long serialVersionUID = 485583262L;
}
