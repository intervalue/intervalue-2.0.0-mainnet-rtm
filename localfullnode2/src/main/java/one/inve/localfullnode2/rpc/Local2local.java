// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Hashnet1.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package one.inve.localfullnode2.rpc;

public interface Local2local extends com.zeroc.Ice.Object
{
    GossipObj gossipMyMaxSeqList4Consensus(String pubkey, String sig, String snapVersion, String snapHash, long[] seqs, com.zeroc.Ice.Current current);

    GossipObj gossipMyMaxSeqList4Sync(String pubkey, String sig, int otherShardId, String snapVersion, String snapHash, long[] seqs, com.zeroc.Ice.Current current);

    SnapObj gossipMySnapVersion4Snap(String pubkey, String sig, String hash, String transCount, com.zeroc.Ice.Current current);

    AppointEvent gossip4AppointEvent(String pubkey, String sig, int shardId, long creatorId, long creatorSeq, com.zeroc.Ice.Current current);

    boolean gossipReport4split(String pubkey, String sig, String data, int shardId, String event, com.zeroc.Ice.Current current);

    boolean gossip4SplitDel(String pubkey, String sig, String data, int shardId, long creatorId, long creatorSeq, String eventHash, boolean isNeedGossip2Center, com.zeroc.Ice.Current current);

    long[] getHeight(com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::rpc::Local2local"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::rpc::Local2local";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossipMyMaxSeqList4Consensus(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        String iceP_snapVersion;
        String iceP_snapHash;
        long[] iceP_seqs;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_snapVersion = istr.readString();
        iceP_snapHash = istr.readString();
        iceP_seqs = istr.readLongSeq();
        inS.endReadParams();
        GossipObj ret = obj.gossipMyMaxSeqList4Consensus(iceP_pubkey, iceP_sig, iceP_snapVersion, iceP_snapHash, iceP_seqs, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        GossipObj.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossipMyMaxSeqList4Sync(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        int iceP_otherShardId;
        String iceP_snapVersion;
        String iceP_snapHash;
        long[] iceP_seqs;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_otherShardId = istr.readInt();
        iceP_snapVersion = istr.readString();
        iceP_snapHash = istr.readString();
        iceP_seqs = istr.readLongSeq();
        inS.endReadParams();
        GossipObj ret = obj.gossipMyMaxSeqList4Sync(iceP_pubkey, iceP_sig, iceP_otherShardId, iceP_snapVersion, iceP_snapHash, iceP_seqs, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        GossipObj.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossipMySnapVersion4Snap(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        String iceP_hash;
        String iceP_transCount;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_hash = istr.readString();
        iceP_transCount = istr.readString();
        inS.endReadParams();
        SnapObj ret = obj.gossipMySnapVersion4Snap(iceP_pubkey, iceP_sig, iceP_hash, iceP_transCount, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SnapObj.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossip4AppointEvent(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        int iceP_shardId;
        long iceP_creatorId;
        long iceP_creatorSeq;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_shardId = istr.readInt();
        iceP_creatorId = istr.readLong();
        iceP_creatorSeq = istr.readLong();
        inS.endReadParams();
        AppointEvent ret = obj.gossip4AppointEvent(iceP_pubkey, iceP_sig, iceP_shardId, iceP_creatorId, iceP_creatorSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AppointEvent.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossipReport4split(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        String iceP_data;
        int iceP_shardId;
        String iceP_event;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_data = istr.readString();
        iceP_shardId = istr.readInt();
        iceP_event = istr.readString();
        inS.endReadParams();
        boolean ret = obj.gossipReport4split(iceP_pubkey, iceP_sig, iceP_data, iceP_shardId, iceP_event, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_gossip4SplitDel(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        String iceP_sig;
        String iceP_data;
        int iceP_shardId;
        long iceP_creatorId;
        long iceP_creatorSeq;
        String iceP_eventHash;
        boolean iceP_isNeedGossip2Center;
        iceP_pubkey = istr.readString();
        iceP_sig = istr.readString();
        iceP_data = istr.readString();
        iceP_shardId = istr.readInt();
        iceP_creatorId = istr.readLong();
        iceP_creatorSeq = istr.readLong();
        iceP_eventHash = istr.readString();
        iceP_isNeedGossip2Center = istr.readBool();
        inS.endReadParams();
        boolean ret = obj.gossip4SplitDel(iceP_pubkey, iceP_sig, iceP_data, iceP_shardId, iceP_creatorId, iceP_creatorSeq, iceP_eventHash, iceP_isNeedGossip2Center, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getHeight(Local2local obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        long[] ret = obj.getHeight(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLongSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "getHeight",
        "gossip4AppointEvent",
        "gossip4SplitDel",
        "gossipMyMaxSeqList4Consensus",
        "gossipMyMaxSeqList4Sync",
        "gossipMySnapVersion4Snap",
        "gossipReport4split",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getHeight(this, in, current);
            }
            case 1:
            {
                return _iceD_gossip4AppointEvent(this, in, current);
            }
            case 2:
            {
                return _iceD_gossip4SplitDel(this, in, current);
            }
            case 3:
            {
                return _iceD_gossipMyMaxSeqList4Consensus(this, in, current);
            }
            case 4:
            {
                return _iceD_gossipMyMaxSeqList4Sync(this, in, current);
            }
            case 5:
            {
                return _iceD_gossipMySnapVersion4Snap(this, in, current);
            }
            case 6:
            {
                return _iceD_gossipReport4split(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
