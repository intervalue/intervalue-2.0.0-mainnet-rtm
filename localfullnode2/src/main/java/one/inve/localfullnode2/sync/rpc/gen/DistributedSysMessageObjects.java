// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `sync.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package one.inve.localfullnode2.sync.rpc.gen;

public class DistributedSysMessageObjects implements java.lang.Cloneable,
                                                     java.io.Serializable
{
    public String distJson;

    public MerkleTreeizedSyncSysMessage[] sysMessages;

    public byte[] rootHash;

    public DistributedSysMessageObjects()
    {
        this.distJson = "";
    }

    public DistributedSysMessageObjects(String distJson, MerkleTreeizedSyncSysMessage[] sysMessages, byte[] rootHash)
    {
        this.distJson = distJson;
        this.sysMessages = sysMessages;
        this.rootHash = rootHash;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DistributedSysMessageObjects r = null;
        if(rhs instanceof DistributedSysMessageObjects)
        {
            r = (DistributedSysMessageObjects)rhs;
        }

        if(r != null)
        {
            if(this.distJson != r.distJson)
            {
                if(this.distJson == null || r.distJson == null || !this.distJson.equals(r.distJson))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.sysMessages, r.sysMessages))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.rootHash, r.rootHash))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::one::inve::localfullnode2::sync::rpc::gen::DistributedSysMessageObjects");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, distJson);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sysMessages);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, rootHash);
        return h_;
    }

    public DistributedSysMessageObjects clone()
    {
        DistributedSysMessageObjects c = null;
        try
        {
            c = (DistributedSysMessageObjects)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.distJson);
        MerkleTreeizedSyncSysMessageListHelper.write(ostr, this.sysMessages);
        ostr.writeByteSeq(this.rootHash);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.distJson = istr.readString();
        this.sysMessages = MerkleTreeizedSyncSysMessageListHelper.read(istr);
        this.rootHash = istr.readByteSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DistributedSysMessageObjects v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DistributedSysMessageObjects ice_read(com.zeroc.Ice.InputStream istr)
    {
        DistributedSysMessageObjects v = new DistributedSysMessageObjects();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DistributedSysMessageObjects> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DistributedSysMessageObjects v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DistributedSysMessageObjects> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DistributedSysMessageObjects.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DistributedSysMessageObjects _nullMarshalValue = new DistributedSysMessageObjects();

    public static final long serialVersionUID = -225712038L;
}
