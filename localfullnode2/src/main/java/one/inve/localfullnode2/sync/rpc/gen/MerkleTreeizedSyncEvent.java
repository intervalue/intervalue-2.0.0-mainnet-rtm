// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `sync.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package one.inve.localfullnode2.sync.rpc.gen;

public class MerkleTreeizedSyncEvent implements java.lang.Cloneable,
                                                java.io.Serializable
{
    public SyncEvent syncEvent;

    public byte[][] merklePath;

    public String[] merklePathIndex;

    public MerkleTreeizedSyncEvent()
    {
        this.syncEvent = new SyncEvent();
    }

    public MerkleTreeizedSyncEvent(SyncEvent syncEvent, byte[][] merklePath, String[] merklePathIndex)
    {
        this.syncEvent = syncEvent;
        this.merklePath = merklePath;
        this.merklePathIndex = merklePathIndex;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MerkleTreeizedSyncEvent r = null;
        if(rhs instanceof MerkleTreeizedSyncEvent)
        {
            r = (MerkleTreeizedSyncEvent)rhs;
        }

        if(r != null)
        {
            if(this.syncEvent != r.syncEvent)
            {
                if(this.syncEvent == null || r.syncEvent == null || !this.syncEvent.equals(r.syncEvent))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.merklePath, r.merklePath))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.merklePathIndex, r.merklePathIndex))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::one::inve::localfullnode2::sync::rpc::gen::MerkleTreeizedSyncEvent");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, syncEvent);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, merklePath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, merklePathIndex);
        return h_;
    }

    public MerkleTreeizedSyncEvent clone()
    {
        MerkleTreeizedSyncEvent c = null;
        try
        {
            c = (MerkleTreeizedSyncEvent)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        SyncEvent.ice_write(ostr, this.syncEvent);
        BytesArrayHelper.write(ostr, this.merklePath);
        ostr.writeStringSeq(this.merklePathIndex);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.syncEvent = SyncEvent.ice_read(istr);
        this.merklePath = BytesArrayHelper.read(istr);
        this.merklePathIndex = istr.readStringSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, MerkleTreeizedSyncEvent v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public MerkleTreeizedSyncEvent ice_read(com.zeroc.Ice.InputStream istr)
    {
        MerkleTreeizedSyncEvent v = new MerkleTreeizedSyncEvent();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<MerkleTreeizedSyncEvent> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, MerkleTreeizedSyncEvent v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<MerkleTreeizedSyncEvent> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(MerkleTreeizedSyncEvent.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final MerkleTreeizedSyncEvent _nullMarshalValue = new MerkleTreeizedSyncEvent();

    public static final long serialVersionUID = 1982836264L;
}
