// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Hashnet.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package one.inve.rpc.fullnode;

public interface Register extends com.zeroc.Ice.Object
{
    String registerFullNode(String ip, int rpcPort, int httpPort, String pubkey, com.zeroc.Ice.Current current);

    String addNewFullNode(String fullnodeStr, com.zeroc.Ice.Current current);

    String logoutFullNode(String pubkey, com.zeroc.Ice.Current current);

    String getFullNodeList(String pubkey, com.zeroc.Ice.Current current);

    String getNeighborLocalFullNodeList(String pubkey, com.zeroc.Ice.Current current);

    String getLocalFullNodeList(String pubkey, com.zeroc.Ice.Current current);

    String getNodeShardInfo(String pubkey, com.zeroc.Ice.Current current);

    String getShardInfoList(com.zeroc.Ice.Current current);

    String[] getFullNodePublicKeyList(com.zeroc.Ice.Current current);

    String[][] getLocalFullNodePublicKeyList(com.zeroc.Ice.Current current);

    String aliveHeartRelayNode(String pubkey, com.zeroc.Ice.Current current);

    boolean sendPbftMessage(String message, com.zeroc.Ice.Current current);

    String queryBlock(String index, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::one::inve::rpc::fullnode::Register"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::one::inve::rpc::fullnode::Register";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerFullNode(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_ip;
        int iceP_rpcPort;
        int iceP_httpPort;
        String iceP_pubkey;
        iceP_ip = istr.readString();
        iceP_rpcPort = istr.readInt();
        iceP_httpPort = istr.readInt();
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.registerFullNode(iceP_ip, iceP_rpcPort, iceP_httpPort, iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addNewFullNode(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fullnodeStr;
        iceP_fullnodeStr = istr.readString();
        inS.endReadParams();
        String ret = obj.addNewFullNode(iceP_fullnodeStr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_logoutFullNode(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.logoutFullNode(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNodeList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.getFullNodeList(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNeighborLocalFullNodeList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.getNeighborLocalFullNodeList(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLocalFullNodeList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.getLocalFullNodeList(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeShardInfo(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.getNodeShardInfo(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getShardInfoList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.getShardInfoList(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNodePublicKeyList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.getFullNodePublicKeyList(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLocalFullNodePublicKeyList(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[][] ret = obj.getLocalFullNodePublicKeyList(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        PublicKey2DListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_aliveHeartRelayNode(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pubkey;
        iceP_pubkey = istr.readString();
        inS.endReadParams();
        String ret = obj.aliveHeartRelayNode(iceP_pubkey, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendPbftMessage(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_message;
        iceP_message = istr.readString();
        inS.endReadParams();
        boolean ret = obj.sendPbftMessage(iceP_message, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_queryBlock(Register obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_index;
        iceP_index = istr.readString();
        inS.endReadParams();
        String ret = obj.queryBlock(iceP_index, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "addNewFullNode",
        "aliveHeartRelayNode",
        "getFullNodeList",
        "getFullNodePublicKeyList",
        "getLocalFullNodeList",
        "getLocalFullNodePublicKeyList",
        "getNeighborLocalFullNodeList",
        "getNodeShardInfo",
        "getShardInfoList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "logoutFullNode",
        "queryBlock",
        "registerFullNode",
        "sendPbftMessage"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addNewFullNode(this, in, current);
            }
            case 1:
            {
                return _iceD_aliveHeartRelayNode(this, in, current);
            }
            case 2:
            {
                return _iceD_getFullNodeList(this, in, current);
            }
            case 3:
            {
                return _iceD_getFullNodePublicKeyList(this, in, current);
            }
            case 4:
            {
                return _iceD_getLocalFullNodeList(this, in, current);
            }
            case 5:
            {
                return _iceD_getLocalFullNodePublicKeyList(this, in, current);
            }
            case 6:
            {
                return _iceD_getNeighborLocalFullNodeList(this, in, current);
            }
            case 7:
            {
                return _iceD_getNodeShardInfo(this, in, current);
            }
            case 8:
            {
                return _iceD_getShardInfoList(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 12:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 13:
            {
                return _iceD_logoutFullNode(this, in, current);
            }
            case 14:
            {
                return _iceD_queryBlock(this, in, current);
            }
            case 15:
            {
                return _iceD_registerFullNode(this, in, current);
            }
            case 16:
            {
                return _iceD_sendPbftMessage(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
